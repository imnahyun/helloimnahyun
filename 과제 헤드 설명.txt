game.c 

함수 get_user_input()
사용자로부터 숫자 3개를 입력받는 함수입니다.
매개변수로 사용자가 입력한 숫자들을 저장할 배열 user[]를 받습니다.
숫자 1자리씩만 입력받기 위해 scanf_s("%1d%1d%1d", &user[0], &user[1], &user[2])를 사용합니다.
사용자가 중복되는 숫자를 입력했을 경우, "중복되는 숫자는 입력할 수 없습니다. 다시 입력해주세요." 라는 메시지를 출력합니다.
함수 play_game()
게임 진행을 위한 함수입니다.
매개변수로 난수 배열 random[], 사용자가 입력한 숫자 배열 user[], 남은 시도 횟수 chance, 시도 횟수 try_count, 게임 종료 여부를 나타내는 game_over를 받습니다.
strike와 ball을 계산하여 게임을 진행합니다.
strike가 3일 경우, "정답입니다!" 메시지를 출력하고 game_over를 1로 변경합니다.
strike와 ball이 0일 경우, "아웃!" 메시지를 출력하고 chance를 1 감소시킵니다.
그 외에는 "X 스트라이크, Y 볼입니다." 메시지를 출력하고 chance를 1 감소시킵니다.



main.c

이 프로그램은 야구 게임을 구현한 것입니다. 
사용자는 0에서 9 사이의 서로 다른 세 자리 숫자를 추측하고, 프로그램은 무작위로 생성된 세 자리 숫자와 비교하여 결과를 알려줍니다.

프로그램의 메인 함수는 다음과 같은 일을 합니다.

srand() 함수를 호출하여 무작위 수를 생성하기 위한 시드를 설정합니다.
무작위 수를 생성하여 random 배열에 저장합니다.
while 루프를 사용하여 사용자가 게임에서 이길 때까지 게임을 실행합니다. 게임이 이기거나 사용자의 기회가 모두 소진될 때까지 반복합니다.
사용자의 기회 수와 입력을 출력하고, get_user_input() 함수를 호출하여 사용자의 입력을 받습니다.
play_game() 함수를 호출하여 사용자의 입력과 무작위 수를 비교하고 결과를 출력합니다.
게임이 끝나면, 사용자가 이기거나 모든 기회를 소진했는지에 따라 적절한 메시지를 출력합니다.
get_user_input() 함수는 사용자로부터 입력을 받습니다. 사용자는 세 자리 숫자를 입력하며, 중복된 숫자는 입력할 수 없습니다. 
사용자가 올바르지 않은 입력을 한 경우, 함수는 다시 입력을 받도록 안내합니다.

play_game() 함수는 사용자의 입력과 무작위 수를 비교하고 결과를 출력합니다. 함수는 스트라이크와 볼의 개수를 계산합니다. 
사용자가 입력한 숫자와 무작위 수의 위치가 모두 일치하는 경우, 스트라이크로 간주합니다. 위치가 일치하지 않는 경우, 볼로 간주합니다.
 스트라이크와 볼의 개수에 따라 적절한 메시지를 출력하고, 사용자의 남은 기회 수를 갱신합니다. 게임이 끝나면, game_over 변수를 1로 설정합니다.



game.h

위 코드는 먼저 #pragma once을 이용하여 헤더 파일의 중복 포함을 막고, MAX_CHANCE라는 상수를 정의합니다.

그 다음으로, get_user_input 함수는 유저로부터 3개의 숫자를 입력받아 배열 user에 저장합니다. 
이때, 중복된 숫자를 입력하면 다시 입력하도록 요청합니다.

play_game 함수는 random 배열과 user 배열을 비교하여 스트라이크와 볼의 개수를 계산합니다. 
이후, 게임이 끝난 경우 game_over 변수에 1을 저장하여 게임이 종료되었음을 표시합니다. 
chance 변수는 게임을 진행할 수 있는 기회를 나타내며, 이 값은 MAX_CHANCE로 초기화됩니다. 
try_count 변수는 게임을 플레이한 횟수를 나타내며, 이 값은 게임 오버 또는 게임 클리어 시 출력됩니다.